
# 1 "main.c"

# 12 "/usr/hitech/picc/9.83/include/stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 31 "/usr/hitech/picc/9.83/include/stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "/usr/hitech/picc/9.83/include/stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "/usr/hitech/picc/9.83/include/conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "/usr/hitech/picc/9.83/include/stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 27 "/usr/hitech/picc/9.83/include/stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);

# 106
extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

# 122
extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

# 145
extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);
extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

# 9 "/usr/hitech/picc/9.83/include/pic.h"
extern unsigned char __osccal_val(void);

# 76 "/usr/hitech/picc/9.83/include/pic12f675.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char GPIO @ 0x005;

volatile bit GP0 @ ((unsigned)&GPIO*8)+0;
volatile bit GP1 @ ((unsigned)&GPIO*8)+1;
volatile bit GP2 @ ((unsigned)&GPIO*8)+2;
volatile bit GP3 @ ((unsigned)&GPIO*8)+3;
volatile bit GP4 @ ((unsigned)&GPIO*8)+4;
volatile bit GP5 @ ((unsigned)&GPIO*8)+5;
volatile bit GPIO0 @ ((unsigned)&GPIO*8)+0;
volatile bit GPIO1 @ ((unsigned)&GPIO*8)+1;
volatile bit GPIO2 @ ((unsigned)&GPIO*8)+2;
volatile bit GPIO3 @ ((unsigned)&GPIO*8)+3;
volatile bit GPIO4 @ ((unsigned)&GPIO*8)+4;
volatile bit GPIO5 @ ((unsigned)&GPIO*8)+5;

volatile union {
struct {
unsigned GP0 : 1;
unsigned GP1 : 1;
unsigned GP2 : 1;
unsigned GP3 : 1;
unsigned GP4 : 1;
unsigned GP5 : 1;
};
struct {
unsigned GPIO0 : 1;
unsigned GPIO1 : 1;
unsigned GPIO2 : 1;
unsigned GPIO3 : 1;
unsigned GPIO4 : 1;
unsigned GPIO5 : 1;
};
} GPIObits @ 0x005;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned PCLATH : 5;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit GPIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit GPIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned GPIF : 1;
unsigned INTF : 1;
unsigned T0IF : 1;
unsigned GPIE : 1;
unsigned INTE : 1;
unsigned T0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned TMR0IF : 1;
unsigned : 2;
unsigned TMR0IE : 1;
};
} INTCONbits @ 0x00B;



volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit CMIF @ ((unsigned)&PIR1*8)+3;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;
volatile bit EEIF @ ((unsigned)&PIR1*8)+7;
volatile bit T1IF @ ((unsigned)&PIR1*8)+0;

volatile union {
struct {
unsigned TMR1IF : 1;
unsigned : 2;
unsigned CMIF : 1;
unsigned : 2;
unsigned ADIF : 1;
unsigned EEIF : 1;
};
struct {
unsigned T1IF : 1;
};
} PIR1bits @ 0x00C;




volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;

volatile union {
struct {
unsigned TMR1ON : 1;
unsigned TMR1CS : 1;
unsigned nT1SYNC : 1;
unsigned T1OSCEN : 1;
unsigned T1CKPS : 2;
unsigned TMR1GE : 1;
};
struct {
unsigned : 4;
unsigned T1CKPS0 : 1;
unsigned T1CKPS1 : 1;
};
} T1CONbits @ 0x010;



volatile unsigned char CMCON @ 0x019;

volatile bit CIS @ ((unsigned)&CMCON*8)+3;
volatile bit CINV @ ((unsigned)&CMCON*8)+4;
volatile bit COUT @ ((unsigned)&CMCON*8)+6;
volatile bit CM0 @ ((unsigned)&CMCON*8)+0;
volatile bit CM1 @ ((unsigned)&CMCON*8)+1;
volatile bit CM2 @ ((unsigned)&CMCON*8)+2;

volatile union {
struct {
unsigned CM : 3;
unsigned CIS : 1;
unsigned CINV : 1;
unsigned : 1;
unsigned COUT : 1;
};
struct {
unsigned CM0 : 1;
unsigned CM1 : 1;
unsigned CM2 : 1;
};
} CMCONbits @ 0x019;



volatile unsigned char ADRESH @ 0x01E;



volatile unsigned char ADCON0 @ 0x01F;

volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GO_nDONE @ ((unsigned)&ADCON0*8)+1;
volatile bit VCFG @ ((unsigned)&ADCON0*8)+6;
volatile bit ADFM @ ((unsigned)&ADCON0*8)+7;
volatile bit GO_DONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit nDONE @ ((unsigned)&ADCON0*8)+1;
volatile bit GO @ ((unsigned)&ADCON0*8)+1;

volatile union {
struct {
unsigned ADON : 1;
unsigned GO_nDONE : 1;
unsigned CHS : 2;
unsigned : 2;
unsigned VCFG : 1;
unsigned ADFM : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 2;
unsigned : 2;
unsigned : 1;
unsigned : 1;
};
struct {
unsigned : 1;
unsigned GO_DONE : 1;
unsigned CHS0 : 1;
unsigned CHS1 : 1;
};
struct {
unsigned : 1;
unsigned nDONE : 1;
};
struct {
unsigned : 1;
unsigned GO : 1;
};
} ADCON0bits @ 0x01F;

# 349
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nGPPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nGPPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTION_REGbits @ 0x081;



volatile unsigned char TRISIO @ 0x085;

volatile bit TRISIO0 @ ((unsigned)&TRISIO*8)+0;
volatile bit TRISIO1 @ ((unsigned)&TRISIO*8)+1;
volatile bit TRISIO2 @ ((unsigned)&TRISIO*8)+2;
volatile bit TRISIO3 @ ((unsigned)&TRISIO*8)+3;
volatile bit TRISIO4 @ ((unsigned)&TRISIO*8)+4;
volatile bit TRISIO5 @ ((unsigned)&TRISIO*8)+5;

volatile union {
struct {
unsigned TRISIO0 : 1;
unsigned TRISIO1 : 1;
unsigned TRISIO2 : 1;
unsigned TRISIO3 : 1;
unsigned TRISIO4 : 1;
unsigned TRISIO5 : 1;
};
} TRISIObits @ 0x085;



volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit CMIE @ ((unsigned)&PIE1*8)+3;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;
volatile bit EEIE @ ((unsigned)&PIE1*8)+7;
volatile bit T1IE @ ((unsigned)&PIE1*8)+0;

volatile union {
struct {
unsigned TMR1IE : 1;
unsigned : 2;
unsigned CMIE : 1;
unsigned : 2;
unsigned ADIE : 1;
unsigned EEIE : 1;
};
struct {
unsigned T1IE : 1;
};
} PIE1bits @ 0x08C;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit nBOD @ ((unsigned)&PCON*8)+0;

volatile union {
struct {
unsigned nBOR : 1;
unsigned nPOR : 1;
};
struct {
unsigned nBOD : 1;
};
} PCONbits @ 0x08E;



volatile unsigned char OSCCAL @ 0x090;

volatile bit CAL0 @ ((unsigned)&OSCCAL*8)+2;
volatile bit CAL1 @ ((unsigned)&OSCCAL*8)+3;
volatile bit CAL2 @ ((unsigned)&OSCCAL*8)+4;
volatile bit CAL3 @ ((unsigned)&OSCCAL*8)+5;
volatile bit CAL4 @ ((unsigned)&OSCCAL*8)+6;
volatile bit CAL5 @ ((unsigned)&OSCCAL*8)+7;

volatile union {
struct {
unsigned : 2;
unsigned CAL : 6;
};
struct {
unsigned : 2;
unsigned CAL0 : 1;
unsigned CAL1 : 1;
unsigned CAL2 : 1;
unsigned CAL3 : 1;
unsigned CAL4 : 1;
unsigned CAL5 : 1;
};
} OSCCALbits @ 0x090;



volatile unsigned char WPU @ 0x095;

volatile bit WPU0 @ ((unsigned)&WPU*8)+0;
volatile bit WPU1 @ ((unsigned)&WPU*8)+1;
volatile bit WPU2 @ ((unsigned)&WPU*8)+2;
volatile bit WPU4 @ ((unsigned)&WPU*8)+4;
volatile bit WPU5 @ ((unsigned)&WPU*8)+5;

volatile union {
struct {
unsigned WPU0 : 1;
unsigned WPU1 : 1;
unsigned WPU2 : 1;
unsigned : 1;
unsigned WPU4 : 1;
unsigned WPU5 : 1;
};
} WPUbits @ 0x095;



volatile unsigned char IOC @ 0x096;
volatile unsigned char IOCB @ 0x096;

volatile bit IOC0 @ ((unsigned)&IOC*8)+0;
volatile bit IOC1 @ ((unsigned)&IOC*8)+1;
volatile bit IOC2 @ ((unsigned)&IOC*8)+2;
volatile bit IOC3 @ ((unsigned)&IOC*8)+3;
volatile bit IOC4 @ ((unsigned)&IOC*8)+4;
volatile bit IOC5 @ ((unsigned)&IOC*8)+5;
volatile bit IOCB0 @ ((unsigned)&IOC*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOC*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOC*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOC*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOC*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOC*8)+5;

volatile union {
struct {
unsigned IOC0 : 1;
unsigned IOC1 : 1;
unsigned IOC2 : 1;
unsigned IOC3 : 1;
unsigned IOC4 : 1;
unsigned IOC5 : 1;
};
struct {
unsigned IOCB0 : 1;
unsigned IOCB1 : 1;
unsigned IOCB2 : 1;
unsigned IOCB3 : 1;
unsigned IOCB4 : 1;
unsigned IOCB5 : 1;
};
} IOCbits @ 0x096;



volatile unsigned char VRCON @ 0x099;

volatile bit VRR @ ((unsigned)&VRCON*8)+5;
volatile bit VREN @ ((unsigned)&VRCON*8)+7;
volatile bit VR0 @ ((unsigned)&VRCON*8)+0;
volatile bit VR1 @ ((unsigned)&VRCON*8)+1;
volatile bit VR2 @ ((unsigned)&VRCON*8)+2;
volatile bit VR3 @ ((unsigned)&VRCON*8)+3;

volatile union {
struct {
unsigned VR : 4;
unsigned : 1;
unsigned VRR : 1;
unsigned : 1;
unsigned VREN : 1;
};
struct {
unsigned VR0 : 1;
unsigned VR1 : 1;
unsigned VR2 : 1;
unsigned VR3 : 1;
};
} VRCONbits @ 0x099;



volatile unsigned char EEDATA @ 0x09A;
volatile unsigned char EEDAT @ 0x09A;



volatile unsigned char EEADR @ 0x09B;


volatile union {
struct {
unsigned EEADR : 7;
};
} EEADRbits @ 0x09B;



volatile unsigned char EECON1 @ 0x09C;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;

volatile union {
struct {
unsigned RD : 1;
unsigned WR : 1;
unsigned WREN : 1;
unsigned WRERR : 1;
};
} EECON1bits @ 0x09C;



volatile unsigned char EECON2 @ 0x09D;



volatile unsigned char ADRESL @ 0x09E;



volatile unsigned char ANSEL @ 0x09F;

volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ADCS0 @ ((unsigned)&ANSEL*8)+4;
volatile bit ADCS1 @ ((unsigned)&ANSEL*8)+5;
volatile bit ADCS2 @ ((unsigned)&ANSEL*8)+6;

volatile union {
struct {
unsigned ANS : 4;
unsigned ADCS : 3;
};
struct {
unsigned ANS0 : 1;
unsigned ANS1 : 1;
unsigned ANS2 : 1;
unsigned ANS3 : 1;
unsigned ADCS0 : 1;
unsigned ADCS1 : 1;
unsigned ADCS2 : 1;
};
} ANSELbits @ 0x09F;


# 27 "/usr/hitech/picc/9.83/include/pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 144
extern void flash_erase(unsigned short addr);

# 41 "/usr/hitech/picc/9.83/include/eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "/usr/hitech/picc/9.83/include/pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 19 "main.c"
void init();
void write_spi(unsigned char len, unsigned long data);
void write_spi_address(unsigned char len, unsigned char addr, unsigned int data);
void update_display();
void wait(unsigned char c);
void set_brightness(unsigned char bri);

# 29
int main(int argc, char** argv)
{
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x31FD & 0x31FF & 0x31EF & 0x31FF & 0x31FF & 0x31FF & 0x31FF");

TRISIO = 0;
GIE = 0;

while (1)
{
for (unsigned int i = 0; i < (unsigned) (-1); i++);
GPIO0 = ~GPIO0;
}
return (0);
}

void init()
{


write_spi_address(16, 0b1100, 1);

set_brightness(0xFF);

write_spi_address(16, 0b1011, 8);

write_spi_address(16, 0b1001, 0xFF);
}



void write_spi(unsigned char len, unsigned long data)
{
GPIO2 = 0;
for (unsigned char i = 0; i < len; i++)
{
GPIO3 = 0;
GPIO4 = (data >> i) & 0x1;
GPIO3 = 1;

wait(20);
}
GPIO2 = 1;
wait(20);
GPIO2 = 0;
}

void write_spi_address(unsigned char len, unsigned char addr, unsigned int data)
{
write_spi(len, (addr << 8 | data));
}

void update_display()
{

unsigned char tmp = 0;
write_spi_address(16, 1, 1);
write_spi_address(16, 2, 2);


write_spi_address(16, 1, 3);
write_spi_address(16, 2, 4);


write_spi_address(16, 1, 5);
write_spi_address(16, 2, 6);
}

void set_brightness(unsigned char bri)
{
write_spi_address(16, 0b1010, bri);
}
void wait(unsigned char c)
{
for (unsigned char tmp = 0; tmp <= c; tmp++);
}

